// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MEASUREMENTS_SCHEMAS_H_
#define FLATBUFFERS_GENERATED_MEASUREMENTS_SCHEMAS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace schemas {

struct Measurements;
struct MeasurementsBuilder;

struct Measurements FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MeasurementsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const ::flatbuffers::Vector<double> *data() const {
    return GetPointer<const ::flatbuffers::Vector<double> *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct MeasurementsBuilder {
  typedef Measurements Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<double>> data) {
    fbb_.AddOffset(Measurements::VT_DATA, data);
  }
  explicit MeasurementsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Measurements> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Measurements>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Measurements> CreateMeasurements(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<double>> data = 0) {
  MeasurementsBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Measurements> CreateMeasurementsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<double> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<double>(*data) : 0;
  return schemas::CreateMeasurements(
      _fbb,
      data__);
}

inline const schemas::Measurements *GetMeasurements(const void *buf) {
  return ::flatbuffers::GetRoot<schemas::Measurements>(buf);
}

inline const schemas::Measurements *GetSizePrefixedMeasurements(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<schemas::Measurements>(buf);
}

inline bool VerifyMeasurementsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<schemas::Measurements>(nullptr);
}

inline bool VerifySizePrefixedMeasurementsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<schemas::Measurements>(nullptr);
}

inline void FinishMeasurementsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<schemas::Measurements> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMeasurementsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<schemas::Measurements> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace schemas

#endif  // FLATBUFFERS_GENERATED_MEASUREMENTS_SCHEMAS_H_
