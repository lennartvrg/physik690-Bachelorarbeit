# automatically generated by the FlatBuffers compiler, do not modify

# namespace: schemas

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Vector(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Vector()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVector(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Vector
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Vector
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # Vector
    def DataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # Vector
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Vector
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def VectorStart(builder):
    builder.StartObject(1)

def Start(builder):
    VectorStart(builder)

def VectorAddData(builder, data):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)

def AddData(builder, data):
    VectorAddData(builder, data)

def VectorStartDataVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartDataVector(builder, numElems):
    return VectorStartDataVector(builder, numElems)

def VectorEnd(builder):
    return builder.EndObject()

def End(builder):
    return VectorEnd(builder)
